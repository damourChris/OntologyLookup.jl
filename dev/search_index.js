var documenterSearchIndex = {"docs":
[{"location":"property_controller/#PropertyController-API-Wrapper","page":"Property Controller","title":"PropertyController API Wrapper","text":"","category":"section"},{"location":"property_controller/","page":"Property Controller","title":"Property Controller","text":"Modules = [OntologyLookup.PropertyController]","category":"page"},{"location":"property_controller/#OntologyLookup.PropertyController.onto_properties-Tuple{AbstractString}","page":"Property Controller","title":"OntologyLookup.PropertyController.onto_properties","text":"onto_properties(onto::AbstractString;\n                [iri::AbstractString=\"\",\n                short_from::AbstractString=\"\",\n                obo_id=\"\",\n                lang::AbstractString=\"en\",\n                encode_iri::Bool=true])\n\nFetches the properties of an ontology specified by onto.\n\nArguments\n\nonto::AbstractString: The name of the ontology.\niri::AbstractString: (optional) The IRI of the property.\nshort_from::AbstractString: (optional) The short form of the property.\nobo_id: (optional) The OBO ID of the property.\nlang::AbstractString: (optional) The language of the property.\nencode_iri::Bool: (optional) Whether to encode the IRI.\n\nReturns\n\nterms::Dict: A dictionary of properties, where the keys are the OBO IDs and the values are Term objects.\n\nExample\n\nonto = \"duo\"\niri = \"http://purl.obolibrary.org/obo/BFO_0000050\"\nproperties = onto_properties(onto; iri=iri)\n\nSee also\n\nonto_property()\n\n\n\n\n\n","category":"method"},{"location":"property_controller/#OntologyLookup.PropertyController.onto_property-Tuple{AbstractString, AbstractString}","page":"Property Controller","title":"OntologyLookup.PropertyController.onto_property","text":"onto_property(onto::AbstractString, iri::AbstractString; encode_iri::Bool=false)\n\nFetches the term with the given IRI from the specified ontology.\n\nArguments\n\nonto::AbstractString: The name of the ontology.\niri::AbstractString: The IRI (Internationalized Resource Identifier) of the term.\nencode_iri::Bool=false: Whether to encode the IRI before making the request.\n\nReturns\n\nIf the term is found, returns a Term object representing the term.\nIf an error occurs during the request, logs the error and returns missing.\n\nSee also\n\nonto_properties()\n\n\n\n\n\n","category":"method"},{"location":"term_controller/#TermController-API-Wrapper","page":"Term Controller","title":"TermController API Wrapper","text":"","category":"section"},{"location":"term_controller/","page":"Term Controller","title":"Term Controller","text":"Modules = [OntologyLookup.TermController]","category":"page"},{"location":"term_controller/#OntologyLookup.TermController.get_hierarchical_parent-Tuple{Term}","page":"Term Controller","title":"OntologyLookup.TermController.get_hierarchical_parent","text":"get_hierarchical_parent(term::Term; preferred_parent::Union{Missing,Term}=missing)\n\nFetches the hierarchical parent of a given term.\n\nArguments\n\nterm::Term: The term for which to fetch the hierarchical parent.\npreferred_parent::Union{Missing,Term} (optional): The preferred parent term to be returned, if multiple parents are found.\nencode_iri::Bool (optional): Whether to encode the IRI before making the request. Default is true since IRI are usually stored non-encode in Term struct.\n\nReturns\n\nIf a single parent is found, returns the hierarchical parent as a Term object.\nIf multiple parents are found and a preferred parent is specified, returns the preferred parent as a Term object.\nIf multiple parents are found and no preferred parent is specified, returns the first parent as a Term object.\nIf an error occurs while fetching the parents, returns missing.\n\n\n\n\n\n","category":"method"},{"location":"term_controller/#OntologyLookup.TermController.get_parents-Tuple{Term}","page":"Term Controller","title":"OntologyLookup.TermController.get_parents","text":"get_parents(term::Term)\n\nFetches the parent terms for a given term.\n\nArguments\n\nterm::Term: The term for which to fetch the parent terms.\nencode_iri::Bool (optional): Whether to encode the IRI before making the request. Default is true since IRI are usually stored non-encode in Term struct.\n\nReturns\n\nAn array of Term objects representing the parent terms of the given term, or missing if an error occurs.\n\n\n\n\n\n","category":"method"},{"location":"term_controller/#OntologyLookup.TermController.onto_term-Tuple{AbstractString, AbstractString}","page":"Term Controller","title":"OntologyLookup.TermController.onto_term","text":"onto_term(onto::AbstractString, iri::AbstractString; [lang=\"en\", encode_iri=true])\n\nFetches the term information from the specified ontology using the given IRI.\n\nArguments\n\nonto::AbstractString: The name of the ontology.\niri::AbstractString: The IRI (Internationalized Resource Identifier) of the term.\nlang::AbstractString: (optional) The language code for the term description. Default is \"en\".\nencode_iri::Bool (optional): Whether to encode the IRI before making the request. Default is true.\n\nReturns\n\nIf the term is found, returns a Term object containing the term information.\nIf there is an error fetching the term, a warning is issued and missing is returned.\n\n\n\n\n\n","category":"method"},{"location":"term_controller/#OntologyLookup.TermController.onto_terms-Tuple{AbstractString}","page":"Term Controller","title":"OntologyLookup.TermController.onto_terms","text":"onto_terms(onto::AbstractString;\n           [id::AbstractString=\"\",\n           iri::AbstractString=\"\",\n           short_from::AbstractString=\"\",\n           obo_id=\"\",\n           obsoletes::Bool=false,\n           lang::AbstractString=\"en\"])\n\nFetches ontology terms from the OLS API based on the specified parameters.\n\nArguments\n\nonto::AbstractString: The name of the ontology to fetch terms from.\nid::AbstractString: (optional) The ID of the term.\niri::AbstractString: (optional) The IRI of the term.\nshort_from::AbstractString: (optional) The short form of the term.\nobo_id: (optional) The OBO ID of the term.\nobsoletes::Bool: (optional) Whether to include obsoleted terms. Default is false.\nlang::AbstractString: (optional) The language of the term. Default is \"en\".\n\nReturns\n\nA dictionary of terms, where the keys are the OBO IDs of the terms and the values are Term objects.\n\n\n\n\n\n","category":"method"},{"location":"search/#Search-the-Ontologies","page":"Search","title":"Search the Ontologies","text":"","category":"section"},{"location":"search/","page":"Search","title":"Search","text":"Modules = [OntologyLookup.Search]","category":"page"},{"location":"search/#OntologyLookup.Search.OLSquery-Tuple{Dict}","page":"Search","title":"OntologyLookup.Search.OLSquery","text":"OLSquery(q::Dict)\n\nQuery the Ontology Lookup Service (OLS) with the given parameters.\n\nArguments\n\nq::Dict: A dictionary containing the query parameters.\n\nReturns\n\ndata: The response data from the OLS search.\n\n\n\n\n\n","category":"method"},{"location":"search/#OntologyLookup.Search.search-Tuple{String}","page":"Search","title":"OntologyLookup.Search.search","text":"search(q::String; [rows::Int=10, ontology::String=\"\"])\n\nSearches for ontology terms from the Ontology Lookup Service (OLS) using a search query.\n\nArguments\n\nq::String: The search query.\nrows::Int: The maximum number of rows to return.\nontology::String: The ontology to search in.\nexact::Bool: Whether to search for an exact match.\n\nReturns\n\nA DataFrame containing the search results.\n\n\n\n\n\n","category":"method"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"EditURL = \"https://github.com/damourChris/OntologyLookup.jl/blob/master/CHANGELOG.md\"","category":"page"},{"location":"ontologies/#Ontologies","page":"Ontologies","title":"Ontologies","text":"","category":"section"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"The Ontology Lookup Service (OLS) is designed to leverage the power of multiple ontologies, providing a structured and semantic framework for organizing, interpreting, and querying data across various domains.","category":"page"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"The OLS provides access to a wide range of ontologies, including the following:","category":"page"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"ChEBI\nGO\nNCBITaxon\nPR\nUBERON\nEFO","category":"page"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"The OLS also provides access to the following cross-domain ontologies:","category":"page"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"OBO\nEDAM","category":"page"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"And many more. The OLS is designed to be extensible, allowing users to add their own ontologies to the system.","category":"page"},{"location":"ontologies/#Listing-ontologies","page":"Ontologies","title":"Listing ontologies","text":"","category":"section"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"To list all available ontologies, use the following command:","category":"page"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"list_ontologies()","category":"page"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"This will return a list of all available ontologies in the OLS.","category":"page"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"Note, this will return Ontology objects, which contain information about the ontology, such as the name, title, description, and version. If you wish to only get the ids of the ontologies, you can use the following command:","category":"page"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"list_ontology_ids()","category":"page"},{"location":"ontologies/#Getting-an-ontology","page":"Ontologies","title":"Getting an ontology","text":"","category":"section"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"To get information about a specific ontology, use the following command:","category":"page"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"get_ontology(\"CHEBI\")","category":"page"},{"location":"ontologies/#References","page":"Ontologies","title":"References","text":"","category":"section"},{"location":"ontologies/","page":"Ontologies","title":"Ontologies","text":"Modules = [OntologyLookup.Ontologies]","category":"page"},{"location":"ontologies/#OntologyLookup.Ontologies.get_ontology-Tuple{String}","page":"Ontologies","title":"OntologyLookup.Ontologies.get_ontology","text":"get_ontology(ontology_id::String)::Union{Ontology,Missing}\n\nFetches an ontology from the OLS (Ontology Lookup Service) based on the given ontology_id.  To get a list of available ontologies, use the list_ontologies() function.\n\nReturns\n\nIf the ontology is found, returns an Ontology object containing information about the ontology.\nIf the ontology is not found or an error occurs during the fetch, returns missing.\n\nSee also\n\nlist_ontologies()\nlist_ontologies_ids()\n\n\n\n\n\n","category":"method"},{"location":"ontologies/#OntologyLookup.Ontologies.list_ontologies-Tuple{}","page":"Ontologies","title":"OntologyLookup.Ontologies.list_ontologies","text":"list_ontologies()::Union{Vector{Ontology},Missing}\n\nFetches a list of ontologies from the OLS (Ontology Lookup Service) API.\n\nReturns\n\nIf successful, returns a vector of Ontology objects representing the fetched ontologies.\nIf an error occurs during the API request, returns missing.\n\nSee also\n\nlist_ontologies_ids()\nget_ontology()\n\n\n\n\n\n","category":"method"},{"location":"ontologies/#OntologyLookup.Ontologies.list_ontologies_ids-Tuple{}","page":"Ontologies","title":"OntologyLookup.Ontologies.list_ontologies_ids","text":"list_ontologies_ids()::Union{Vector{String},Missing}\n\nReturns a vector of ontology IDs.\n\nRetrieve the list of available ontologies, and returns a vector of their IDs.  If an error occurs during the fetch, the function returns missing.\n\nSee also\n\nlist_ontologies()\nget_ontology()\n\n\n\n\n\n","category":"method"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [OntologyLookup]","category":"page"},{"location":"#OntologyLookup","page":"Home","title":"OntologyLookup","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OntologyLookup.","category":"page"}]
}
